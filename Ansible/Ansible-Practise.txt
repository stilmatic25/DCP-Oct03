#**************************************************************************************************************************
###Ansible - Demo.

##Adhoc Commands:

###test ssh connection from ansible host/controller to remote hosts

ssh -p22 -i /etc/ansible/ansiblenodekeys/ansiblenode1.key ansibleadmin@172.31.1.175
ssh -p22 -i /etc/ansible/ansiblenodekeys/ansiblenode2.key ansibleadmin@172.31.0.194

###update vi etc/ansible/host
#**************************************
#hosts file is the default Inventory file for ansible 
#**************************************

[testnodes]
samplenode1 ansible_ssh_host=172.31.1.175 ansible_ssh_user=ansibleadmin ansible_ssh_private_key_file=/etc/ansible/ansiblenodekeys/ansiblenode1.key
samplenode2 ansible_ssh_host=172.31.0.194 ansible_ssh_user=ansibleadmin ansible_ssh_private_key_file=/etc/ansible/ansiblenodekeys/ansiblenode2.key

#**************************************************************************************************************************
#Access thru Ansible Controller :
#**************************************************************************************************************************
Ansible Modules: Eg.: 

setup,copy,fetch,user,command,shell,ping,service,

ansible testnodes -m ping

ansible all -m ping ### will ping all hosts from /etc/ansible/hosts file

ansible samplenode1 -m ping
ansible samplenode2 -m ping

#or using user defined Inventory file
#ansible ansible-node1 -m ping -i myinventoryfile.txt

#**************************************************************************************************************************

ansible testnodes -m shell -a "sleep 5 ; echo 'hi'"

ANSIBLE_KEEP_REMOTE_FILES=1 ansible testnodes -m shell -a "uptime"

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Ansible Facts!

ansible samplenode1 -m setup
ansible samplenode2 -m setup -a "filter=ansible_mounts"
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

##Transfer a file from Ansible Controller to Nodes using copy Module

ansible samplenode1 -m copy -a "src=/etc/ansible/playbooks/samplefile.txt dest=/home/ansibleadmin"

ansible samplenode1 -m copy -a "src=/etc/ansible/testfile1.txt dest=/home/ansibleadmin backup=yes"


###idempotent

ansible testnodes -m copy -a "content='hello from Ansible Controller\n' dest=/dest/path/hello.txt"

ansible testnodes -m copy -a "content='hello from Ansible Controller\n' dest=/dest/path/hello.txt backup=yes"

ansible testnodes -m copy -a "content='hello from Ansible Controller\n' dest=/dest/path/hello.txt backup=yes"


##Transfer a file from Ansible Nodes to Ansible Controller using fetch Module

ansible testnodes -m fetch -a "src=/home/ansibleadmin/file1.txt dest=/etc/ansible/"

ansible testnodes -m fetch -a "src=/srcfile/path/nodefile1.txt dest=/dest/path/"


#Adhoc Commands with various Modules
#How Ansible Works?
#Ansible Facts & Variables

#######Adhoc Commands with various Modules

###Test Connection:
ansible testnodes -m ping

### Test Uptime of Nodes:
ansible testnodes -m shell -a "uptime"

### Pass Multiple Groups:
ansible testnodes1:testnodes2 -m shell -a "uptime"

### Check RAM Utilization:
ansible testnodes -m shell -a "free -m"

###Pass Different Inventory File:
ansible -i inventory_file_name prodnodes -m shell -a "uptime"


### List all modules:
ansible-doc -l
### No. of modules:
ansible-doc -l | wc -l
### Search for specific modules:
ansible-doc -l | grep shel
### To know about any specific modules:
ansible-doc shell


**************************************************************************************************************************
#create a dir in /ect/ansible/ for playbooks
#and create the playbook .yaml files as mentioned below:
#sample playbooks:

#testfile.yaml
---
- hosts: all
  tasks:
  - name: Creating an empty file
    file:
      path: "/home/ansibleadmin/file1.txt"
      state: touch

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#testfile1.yaml
---
- hosts: all
  tasks:
  - name: Creating a file with content
    copy:
      dest: "/home/ansibleadmin/filewithrecs.txt"
#	  src: "file1.txt"
      content: |
        line 01
        line 02


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#Ansible VAriables !
#shell : echo $var1 


---
 - hosts: samplenode1
   tasks:
   - debug:  
      msg:
       - "The os distribution is: {{ansible_distribution}}" 
       - "THe os name is: {{ansible_system}}"
       - "The os family is: {{ansible_os_family}}"
       - "THe mount points are :{{ansible_mounts}}"
       
# How to jus verify playbook syntax:
ansible-playbook testfile.yaml --syntax-check

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~ test_var-datatype.yaml
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#test_var-datatype.yaml
---
 - hosts: samplenode1
   vars:
    x: 23
    my_num: 45.67
    my_name: Loksai
    my_b: YES   
   tasks:
   - debug:
      msg:
       - "The value of x is: {{x}} and type: {{x|type_debug}}"
       - "THe value of my_num: {{my_num}} and type : {{my_num|type_debug}}"
       - "The value of my_name : {{my_name}} and type: {{my_name|type_debug}}"
       - "THe value of my_b is: {{my_b}} and type : {{my_b|type_debug}}"

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~ register and set-facts
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#test_var-datatype.yaml
---
 - hosts: testnodes
   gather_facts: false
   tasks:
   - shell: "bash --version"

#test_var-datatype.yaml
---
 - hosts: testnodes
   gather_facts: false
   tasks:
   - shell: "bash --version"
     register: bash_ver

#register_set_facts.yaml
---
 - hosts: samplenode1
   tasks:
   - shell: "bash --version"
     register: bash_ver
   - set_fact:
      bash_version: "{{bash_ver.stdout.split('\n')[0].split()[3]}}"
      my_value: "bash version"
   - debug: var=bash_version
   
   
Become :

---
  - hosts: samplenode1
    gather_facts: false
    #become: yes
    tasks:
      - name: Install httpd
        yum:
          name: httpd
          state: present


Handlers :

---
  - hosts: samplenode1
    #gather_facts: false
    become: yes
    tasks:
      - name: Install httpd
        yum:
          name: httpd
          state: present
		register: resultt
      - debug: var=resultt.changed		
      - name: start httpd
        service:
          name: httpd
          state: started
		when: resultt.changed == True


---
  - hosts: samplenode1
    become: yes
    tasks:
      - name: Install httpd
        yum:
          name: httpd
          state: present			# CHANGE=0		
      - name: start httpd
        service:
          name: httpd
          state: started			# CHANGE=0

---
  - hosts: samplenode1
    gather_facts: false
    become: yes
    tasks:
      - name: Install httpd
        yum:
          name: httpd
          state: present			# CHANGE=1
		notify:
		  - start httpd		  
    handlers:
      - name: start httpd
        service:
          name: httpd
          state: started
		  
#Eg.: Labels & Selectors :::  




Loops :

---
  - hosts: samplenode1
    become: yes
    tasks:
      - yum:
         name: git
         state: present
      - yum:
         name: httpd
         state: present
      - yum:
         name: vim
         state: present

---
  - hosts: samplenode1
    gather_facts: false
    become: yes
    tasks:
      - yum:
         name: "{{item}}"
         state: absent
        loop:
          - git
          - httpd
          - vim
          
          
#~~~~~~~~~~~~~~~~~~~~~~~~~
Ansible Roles

Intranet: Repositories for Managing the Playbooks 

Ansible Playbooks --- > Repository

Internet : Access the playbooks 

Ansible-galaxy 

Roles! are the packages of Ansible components / Templates

Team1,2,3,4,5,6


Summary:

Ansible
Install Ansible
inventory 
modules,
playbook
	handler, loop, var, conditions, 
	roles 
