#Docker Installation | Configuration | Commands & Concepts:

sudo yum install docker


yum install docker -y
docker version
systemctl status docker
systemctl start docker
systemctl status docker
systemctl enable docker





#Basic Docker Commands :

#goto : https://hub.docker.com/

#Test Docker with basic hello-world image from docker hub.

docker pull centos 

docker run centos 



docker run centos
docker run nginx

docker pull hello-world
docker pull docker/whalesay


docker images

docker run centos

docker ps
docker ps -a

### Run Container in Interactive Mode:
###docker run -it --name=testvol1 centos bash
docker run -it centos bash

cat /etc/*release*

### Print the Docker Centos Image Release Info.
dockerpath# cat /etc/*release*
dockerpath# exit

###Run Docker Container in DETACHED MODE :
docker run -d centos sleep 20 
docker ps -a

###Run Docker Container in FOREGROUND MODE :
docker run centos sleep 20
docker ps -a

docker run -d centos sleep 200
docker stop <container_id>

docker rm 2c5b 1b4f

docker images
docker rmi <image_id>

### Before deleting image, ensure that it is not referenced to any container. 
### In it is mapped, delete the container first, then can re container image.

docker rmi -f hello-world

docker pull centos:centos7.9.2009

docker run centos sleep 1100

docker stop <container_id>

### Detached Mode
docker run -d centos sleep 2000

docker attach <running_container_id>
docker stop <container_id>

###docker pull timer

#docker pull jenkins

#docker run jenkins

docker inspect <container_id>

docker history <imagename>


### Port-Mapping / Port-Binding

goto hub.docker & search for tomcat

docker run -it -p 8088:8080 tomcat:8.0

#### -p host_port:container_port

Once you install tomcat on ur vm :

<public_ip>:8080


###Docker Logs

docker logs <container_id>

#Access Docker contents using exec - Non-Interactive Mode: 

docker exec e8553a4721d5 cat /etc/hosts

#Login to Docker Container using exec in Interactive Mode: (Using Container Name) 

docker exec -it <container_name-gallant_blackburn> bash

#Run Docker Image in Interactive Mode: (Using Image Name) 

docker run -it centos bash
dockerpath# cat /etc/*release*
dockerpath# exit

### Get the running Container Names
docker ps -q

###Stop all Running Containers:

docker stop $(docker ps -q)

docker kill $(docker ps -q)

###Build Docker Image :::

Dockerfile 

###Using commit: 

	docker run -it debian

	ls

	git

	apt-get update && apt-get install -y git 

	clear

	git 

	docker ps -a 

	docker commit <container_id> loksaieta/debianwithgit:v1.0

	docker images

	docker run -it -d loksaieta/debianwithgit:v1.0
	
	###Login to Container:
	docker exec -it <container_name-wizardly_shannon> bash

###Using Docker file:

mkdir docker-contents
cd docker-contents

vi Dockerfile

FROM debian
RUN apt-get update
RUN apt-get install -y git
RUN apt-get install -y vim

### Best Practice:

FROM debian
RUN apt-get update && apt-get install -y \
	git \
	vim

###

###save this Dockerfile

docker build -t loksaieta/debian-with-git1 .

docker images


#### Docker Push images to Docker Registry:

docker images

docker tag <image_id> loksaieta/debian-git1:1.0

docker tag 9ed8e98785e4 loksaieta/debian-with-git1:v1.0

docker images 

## Push to docker registry

docker login --username=loksaieta

password: dckr_asdf_asdfasdf0UYt7wiwyTovy3ikWf8

#docker push loksaieta/debian-git2:v1.0

docker push loksaieta/debian-with-git1:v1.0

#docker push loksaieta/debian-git:v1.1

##Docker File
###Storage
### Volumes:

docker run centos sleep 30

docker volume list

docker volume create v1 

docker volume inspect v1

docker run -it --name=testvol1 --mount source=v1,destination=/v1 bash 

docker run -it --mount source=v1,destination=/v1 centos bash

stateless & Stateful Appln.



java n devops aws devops ==>

d...........................





























###Docker-Compose

sudo curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose


wget https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)

sudo mv docker-compose-$(uname -s)-$(uname -m) /usr/local/bin/docker-compose

sudo chmod -v +x /usr/local/bin/docker-compose

docker-compose version


services:
  web:
    image: “LoksaiETA/simple-webapp"
  database:
    image: “mongodb“
  messaging:
    image: "redis“ 
  orchestration:
    image:	“ansible“

Docker-Swarm
8tgOic

Create any new code version... -- dockerised -- push to docker registry 


Deploy a web appln.

Login_screen service (UI)

Database SErvice - 



Virtual Machine - Node - public_ip 

c1,c2,c3,c4

Port Mapping.. 



Container :
Jenkins - 8080
tomcat - 8089

Docker Compose :
###sudo curl -L "https://github.com/docker/compose/releases/download/<version>/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

###sudo chmod +x /usr/local/bin/docker-compose

###https://github.com/docker/compose/releases/tag/v2.11.2

sudo curl -L https://github.com/docker/compose/releases/download/1.21.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose

sudo chmod +x /usr/local/bin/docker-compose

## edit .bash_profile

#Update 
#PATH=$PATH:$HOME/bin:/usr/local/bin
source ~/.bash_profile

docker-compose --version

docker-compose.yaml Node - public_ip

Node1:

Container 1
			Jenkins - automated Build
Container 2
			Testing - Selenium tools 
Container 3
			Tomcat/Nginx - 

Node2:

Container 1
			Jenkins - automated Build
Container 2
			Testing - Selenium tools 
Container 3
			Tomcat/Nginx - 


Container 1
			Jenkins - automated Build
Container 2
			Testing - Selenium tools 
Container 3
			Tomcat/Nginx - 

Container 1
			Jenkins - automated Build
Container 2
			Testing - Selenium tools 
Container 3
			Tomcat/Nginx - 

Container 1
			Jenkins - automated Build
Container 2
			Testing - Selenium tools 
Container 3
			Tomcat/Nginx - 

Container 1
			Jenkins - automated Build
Container 2
			Testing - Selenium tools 
Container 3
			Tomcat/Nginx - 
			
Docker Swarm - Container Orchestrator 

Kubernetes. 
			

Docker Swarm				(vs)				Kubernetes    - Kubernetes Dashboard (GUI)

- Both are Container Orchestrator  (pods)

Create some Services... 

100 Containers ---> all are meant for my prod environment. 

Availability!  of Containers ????????

replicas --->  3 containers of same image tomcat (webappln.)

Load balancing! 


